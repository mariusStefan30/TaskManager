@* 

@page "/blazor/tasks"
@inject HttpClient Http
@inject IJSRuntime Js

<h3>Lista Task-uri</h3>

@if (loading)
{
	<p><em>Se încarcă task-urile…</em></p>
}
else if (loadError is not null)
{
	<div class="alert alert-danger">@loadError</div>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Title</th>
				<th>Description</th>
				<th>Finalizat?</th>
				<th>Acțiuni</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var t in tasks)
			{
				<tr class="@(t.IsDone ? "table-success" : null)">
					<td>@t.Title</td>
					<td>@t.Description</td>
					<td>
						<input type="checkbox"
							   checked="@t.IsDone"
							   @onchange="() => ToggleDoneAsync(t)" />
					</td>
					<td>
						<a class="btn btn-sm btn-primary"
						   href="@($"/task/edit/{t.Id}")">
							Edit
						</a>
						<button class="btn btn-sm btn-danger ms-1"
								@onclick="() => DeleteAsync(t.Id)">
							Delete
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<a class="btn btn-success" href="/task/edit">
		Adaugă Task Nou
	</a>
}

@code {
	// 1) Fields must be declared before markup uses them
	List<TaskDto> tasks = new();
	bool loading = true;
	string? loadError;

	// 2) Model matching your API
	class TaskDto
	{
		public int Id { get; set; }
		public string Title { get; set; } = "";
		public string Description { get; set; } = "";
		public bool IsDone { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			tasks = await Http.GetFromJsonAsync<List<TaskDto>>("api/TaskItemsApi")
					?? new List<TaskDto>();
		}
		catch (Exception ex)
		{
			loadError = $"Eroare la încărcare: {ex.Message}";
		}
		finally
		{
			loading = false;
		}
	}

	async Task ToggleDoneAsync(TaskDto t)
	{
		var old = t.IsDone;
		t.IsDone = !old;

		var resp = await Http.PutAsJsonAsync(
			$"api/TaskItemsApi/{t.Id}", t);

		if (!resp.IsSuccessStatusCode)
		{
			t.IsDone = old;
			await Js.InvokeVoidAsync("alert", "Nu am putut actualiza task-ul");
		}
	}

	async Task DeleteAsync(int id)
	{
		var confirmed = await Js.InvokeAsync<bool>(
			"confirm", "Ștergi task-ul?");
		if (!confirmed) return;

		var resp = await Http.DeleteAsync($"api/TaskItemsApi/{id}");
		if (resp.IsSuccessStatusCode)
		{
			tasks.RemoveAll(x => x.Id == id);
		}
		else
		{
			await Js.InvokeVoidAsync("alert", "Ștergere eșuată");
		}
	}
}
 *@

@* (exemplu UI cu Fluxor) *@

@* ruta pentru listă *@
@page "/blazor/tasks"

@using Fluxor
@using TaskManager.BlazorState.Tasks
@using TaskManager.Models.TaskDatatransferobject
@inject IState<TasksState> State
@inject IDispatcher Dispatcher
<h3>Lista Task-uri</h3>

@if (State.Value.IsLoading)                    @* afișăm loading *@
{
    <p><em>Se încarcă...</em></p>
}
else if (!string.IsNullOrWhiteSpace(State.Value.Error))  @* afișăm eroarea *@
{
    <div class="alert alert-danger">@State.Value.Error</div>
}
else                                           @* afișăm tabelul *@
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Finalizat?</th>
                <th>Acțiuni</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var t in State.Value.Items)
        {
            <tr>
                <td>@t.Title</td>
                <td>@t.Description</td>
                <td>
                    <input type="checkbox"
                           checked="@t.IsDone"
                           @onchange="@(e => OnToggle(t, (bool)e.Value!))" />
                </td>
                <td>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => Dispatcher.Dispatch(new DeleteTaskAction(t.Id))">
                        Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<button class="btn btn-primary"
        @onclick="() => AddDummy()">Adaugă Task (demo)</button>

@code {
    protected override void OnInitialized()
    {
        // La prima intrare pe pagină încărcăm task-urile
        Dispatcher.Dispatch(new LoadTasksAction());
    }

    // Bifare/debifare din UI -> trimitem ToggleDoneAction
    void OnToggle(TaskDto task, bool isDone)
        => Dispatcher.Dispatch(new ToggleDoneAction(task.Id, isDone));

    // Mic demo: adaugă rapid un task la apăsarea butonului
    void AddDummy()
    {
        var dto = new TaskDto(0, "Nou din Blazor", "Creat de pe UI", false);
        Dispatcher.Dispatch(new AddTaskAction(dto));
    }
}
